name: Node.js CI

on:
  workflow_dispatch: # temporary, for debugging
  push:
    branches: [master]
  pull_request:
    branches: [master]
  release:
    types:
      - created

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      actions: read

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "14.x"
      - run: npx lerna bootstrap
      - name: TurboRepo local cache server
        uses: felixmosh/turborepo-gh-artifacts@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          server-token: ${{ secrets.TURBO_SERVER_TOKEN }}
      - run: yarn run verify
      - run: yarn turbo run build --api="http://127.0.0.1:9080" --token="${{ secrets.TURBO_SERVER_TOKEN }}" --team="${{ github.repository_owner }}"

  pre_release:
    runs-on: ubuntu-latest

    needs: build

    if: ${{ github.event_name == 'push' }}

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "14.x"
          registry-url: "https://registry.npmjs.org"
      - run: npx lerna bootstrap
      - run: npx lerna version patch --no-git-tag-version --no-push --yes
      - run: npx lerna version "$(node -e "console.log(require('./lerna.json').version)")-pre.${{ github.run_number }}" --no-git-tag-version --no-push --yes
      - run: yarn turbo run build
      - run: git config user.email "info@openmrs.org" && git config user.name "OpenMRS CI"
      - run: git add . && git commit -m "Prerelease version" --no-verify
      - run: yarn run ci:publish-next
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: packages
          path: |
            packages/**/dist

  deploy_app_shell:
    runs-on: ubuntu-latest

    env:
      ESM_NAME: "@openmrs/esm-app-shell"

    needs: pre_release

    if: ${{ github.event_name == 'push' }}

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
      - name: Compute Timestamp
        run: echo "TIMESTAMP=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
      - name: Prepare Directory
        shell: bash
        run: |
          mkdir -p dist/${{ env.ESM_NAME }}/${{ env.TIMESTAMP }}_${{ github.sha }}
          mkdir -p dist/${{ env.ESM_NAME }}/latest
          cp -r packages/shell/esm-app-shell/dist/ dist/${{ env.ESM_NAME }}/${{ env.TIMESTAMP }}_${{ github.sha }}/
          cp -r packages/shell/esm-app-shell/dist/ dist/${{ env.ESM_NAME }}/latest/
      - name: Publish to Digital Ocean
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --follow-symlinks --cache-control "max-age=31536000"
        env:
          AWS_S3_BUCKET: ${{ secrets.DIGITAL_OCEAN_SPACES_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.DIGITAL_OCEAN_SPACES_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DIGITAL_OCEAN_SPACES_ACCESS_KEY }}
          AWS_S3_ENDPOINT: ${{ secrets.DIGITAL_OCEAN_SPACES_ENDPOINT }}
          SOURCE_DIR: "dist"

  release:
    runs-on: ubuntu-latest

    needs: build

    if: ${{ github.event_name == 'release' }}

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "14.x"
          registry-url: "https://registry.npmjs.org"
      - run: yarn lerna bootstrap
      - run: yarn turbo run build
      - run: yarn run ci:publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
